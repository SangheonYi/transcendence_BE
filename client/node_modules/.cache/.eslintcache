[{"/Users/jinkim/bye_blackhole/client/src/index.tsx":"1","/Users/jinkim/bye_blackhole/client/src/reportWebVitals.js":"2","/Users/jinkim/bye_blackhole/client/src/App.tsx":"3","/Users/jinkim/bye_blackhole/client/src/Chat/Chat.tsx":"4","/Users/jinkim/bye_blackhole/client/src/Lobby/Lobby.tsx":"5","/Users/jinkim/bye_blackhole/client/src/Lobby/RightList.tsx":"6","/Users/jinkim/bye_blackhole/client/src/Lobby/GameListModal.tsx":"7","/Users/jinkim/bye_blackhole/client/src/Lobby/ChatListModal.tsx":"8","/Users/jinkim/bye_blackhole/client/src/Lobby/UserInfoModal.tsx":"9","/Users/jinkim/bye_blackhole/client/src/Chat/Home.tsx":"10","/Users/jinkim/bye_blackhole/client/src/Chat/RoomList.tsx":"11","/Users/jinkim/bye_blackhole/client/src/Chat/UserList.tsx":"12","/Users/jinkim/bye_blackhole/client/src/Chat/ChatLog.tsx":"13","/Users/jinkim/bye_blackhole/client/src/Chat/ChatInput.tsx":"14","/Users/jinkim/bye_blackhole/client/src/Chat/Images.tsx":"15","/Users/jinkim/bye_blackhole/client/src/Chat/MakeRoomModal.tsx":"16","/Users/jinkim/bye_blackhole/client/src/Chat/Loading.tsx":"17","/Users/jinkim/bye_blackhole/client/src/Chat/PwRoomModal.tsx":"18","/Users/jinkim/bye_blackhole/client/src/Chat/NoEntryModal.tsx":"19","/Users/jinkim/bye_blackhole/client/src/images/Images.tsx":"20","/Users/jinkim/bye_blackhole/client/src/Chat/UserListModal.tsx":"21","/Users/jinkim/bye_blackhole/client/src/Chat/ChatOwnerModal.tsx":"22"},{"size":567,"mtime":1624311788554,"results":"23","hashOfConfig":"24"},{"size":362,"mtime":1624311788554,"results":"25","hashOfConfig":"24"},{"size":1266,"mtime":1625494415255,"results":"26","hashOfConfig":"24"},{"size":2571,"mtime":1625607796503,"results":"27","hashOfConfig":"24"},{"size":5196,"mtime":1625584567420,"results":"28","hashOfConfig":"24"},{"size":3980,"mtime":1625605765506,"results":"29","hashOfConfig":"24"},{"size":808,"mtime":1625322888941,"results":"30","hashOfConfig":"24"},{"size":799,"mtime":1625322891516,"results":"31","hashOfConfig":"24"},{"size":2265,"mtime":1625605757745,"results":"32","hashOfConfig":"24"},{"size":1134,"mtime":1625610419330,"results":"33","hashOfConfig":"24"},{"size":5059,"mtime":1625309500995,"results":"34","hashOfConfig":"24"},{"size":3256,"mtime":1625610312167,"results":"35","hashOfConfig":"24"},{"size":3376,"mtime":1625580542875,"results":"36","hashOfConfig":"24"},{"size":1077,"mtime":1625608847899,"results":"37","hashOfConfig":"24"},{"size":621,"mtime":1624311788552,"results":"38","hashOfConfig":"24"},{"size":838,"mtime":1625603956387,"results":"39","hashOfConfig":"24"},{"size":134,"mtime":1624311788553,"results":"40","hashOfConfig":"24"},{"size":813,"mtime":1624311788553,"results":"41","hashOfConfig":"24"},{"size":632,"mtime":1624311788553,"results":"42","hashOfConfig":"24"},{"size":717,"mtime":1625575351071,"results":"43","hashOfConfig":"24"},{"size":1369,"mtime":1625606278744,"results":"44","hashOfConfig":"24"},{"size":941,"mtime":1625608430490,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"1bdmnrm",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"48"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"48"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"48"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"48"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"48"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"48"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"48"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"48"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"48"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"48"},"/Users/jinkim/bye_blackhole/client/src/index.tsx",[],["104","105"],"/Users/jinkim/bye_blackhole/client/src/reportWebVitals.js",[],["106","107"],"/Users/jinkim/bye_blackhole/client/src/App.tsx",[],"/Users/jinkim/bye_blackhole/client/src/Chat/Chat.tsx",["108","109"],"import React, { useEffect, useState } from \"react\";\nimport ChatInput from \"./ChatInput\";\nimport ChatLog from \"./ChatLog\";\nimport Loading from \"./Loading\";\nimport UserList from \"./UserList\";\nimport RightList from \"../Lobby/RightList\";\nimport \"./styles/Chat.scss\"\nimport setting from '../images/setting.png'\nimport ChatOwnerModal from \"./ChatOwnerModal\";\n\nconst socketIOClient = require('socket.io-client')\n\ninterface chatObj{\n\troomName: any,\n\tuserName: any,\n\ticon: any\n}\n\nconst Chat = ({ roomName, userName, icon }: chatObj) => {\n\tconst myInfo = {\n\t\troomName: roomName ? roomName : sessionStorage.getItem(\"roomName\"),\n\t\tuserName: userName ? userName : sessionStorage.getItem(\"userName\"),\n\t\ticon: icon ? icon : sessionStorage.getItem(\"icon\"),\n\t};\n\n\tconst [currentSocket, setCurrentSocket] = useState(socketIOClient());\n\n\tuseEffect(() => {\n\t\tsetCurrentSocket(socketIOClient(\"http://localhost:8080\"));\n\t}, []);\n\n\tif (currentSocket) {\n\t\tcurrentSocket.on(\"connect\", () => {\n\t\t\tcurrentSocket.emit(\"join\", myInfo);\n\t\t});\n\t}\n\n\tconst [RoomInfo, setRoomInfo] = useState<{id:string, num:number, owner_id:string, pwd:string}>({id:'room1', num:7, owner_id:'jinkim', pwd:'asdf'})\n\n\t//chat owner modal\n\tconst [ChatOwnerModalState, setChatOwnerModalState] = useState(false);\n\tconst openChatOwnerModal = () => {\n\t\tsetChatOwnerModalState(true);\n\t}\n\tconst closeChatOwnerModal = () => {\n\t\tsetChatOwnerModalState(false);\n\t}\n\n\treturn (\n\t<div id=\"App-Container\">\n\t\t{currentSocket ? (\n\t\t<>\n\t\t<span className=\"App-Left\">\n\t\t\t<div id=\"chat-container\">\n\t\t\t<div className=\"chat-top\">\n\t\t\t\t<span className=\"RoomInfo-num\">{RoomInfo.num}</span>\n\t\t\t\t<span>{RoomInfo.id}</span>\n\t\t\t\t{'jinkim' === RoomInfo.owner_id ? \n\t\t\t\t\t<button className=\"setting-btn\" onClick={openChatOwnerModal}>\n\t\t\t\t\t\t<img src={setting} width=\"30\" height=\"30\"></img>\n\t\t\t\t\t</button>\n\t\t\t\t\t: null\n\t\t\t\t}\n\t\t\t</div>\n\t\t\t<ChatOwnerModal open={ChatOwnerModalState} close={closeChatOwnerModal} chatRoomID={RoomInfo.id}pwd={RoomInfo.pwd}></ChatOwnerModal>\n\t\t\t<div className=\"chat-bottom\">\n\t\t\t\t<span className=\"left-chatLog\">\n\t\t\t\t\t<div className=\"chatLog-top\">\n\t\t\t\t\t\t<ChatLog userName={userName} socket={currentSocket}></ChatLog>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"chatLog-bottom\">\n\t\t\t\t\t\t<ChatInput userName={userName} socket={currentSocket}></ChatInput>\n\t\t\t\t\t</div>\n\t\t\t\t</span>\n\t\t\t\t<span className=\"right-chatUser\">\n\t\t\t\t\t<UserList socket={currentSocket}></UserList>\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t\t</div>\n\t\t</span>\n\t\t<span className=\"App-Right\">\n\t\t\t\t<RightList />\n\t\t</span>\n\t\t</>\n\t\t) : (\n\t\t  <Loading></Loading>\n\t\t)}\n\t</div>\n  );\n};\n\nexport default Chat;\n","/Users/jinkim/bye_blackhole/client/src/Lobby/Lobby.tsx",["110","111","112","113","114","115","116","117","118","119"],"import axios from \"axios\";\nimport {useEffect, useState, useCallback} from \"react\";\nimport \"./styles/Lobby.scss\"\nimport plusbtn from \"../images/plusbutton.png\"\nimport lock_icon from '../images/private.png'\nimport speed from '../images/speed.png'\nimport RightList from './RightList'\nimport GameListModal from './GameListModal'\nimport ChatListModal from './ChatListModal'\n\n\nconst Lobby = () => {\n\n\tconst [gameList, setGameList] = useState<{player1:string, player2:string, mode:string}[]>([{player1:\"inkimasasdfasdfasdf\", player2:\"jachoi\", mode:\"speed\"}, {player1:\"dshon\", player2:\"taekkim\", mode:\"normal\"},{player1:\"dshon\", player2:\"taekkim\", mode:\"speed\"}, {player1:\"jinkim\", player2:\"jachoi\", mode:\"speed\"}, {player1:\"dshon\", player2:\"taekkim\", mode:\"normal\"}]);\n\n\tconst [chatList, setChatList] = useState<{id:string, password:string, owner_id:string, num:number}[]>([{id:\"chat_r1asdfasdfasdfa\", password:\"\", owner_id:\"oid1\", num:5}, {id:\"chat_r2\", password:\"1234\", owner_id:\"oid1\", num:1}]);\n\tuseEffect(() => {\n\t\tasync function get(){\n\t\t\t//axios.get('')\n\t\t\t//.then((res) => setGameList(res.data))\n\t\t\t//.catch((err)=> console.log(err))\n\n\t\t\t//const res = await axios.get('')\n\t\t\t//setChatList(res.data)\n\t\t}\n\t\tget();\n\t})\n\n\n\t//modal\n\t//game list modal\n\tconst [GameListModalState, setGameListModalState] = useState(false);\n\tconst openGameListModal = () => {\n\t\tsetGameListModalState(true);\n\t}\n\tconst closeGameListModal = () => {\n\t\tsetGameListModalState(false);\n\t}\n\tasync function makeNewGame(){\n\t\t//userName = userName ? userName : sessionStorage.getItem(\"userName\")\n\t\t//await axios.post('/RoomList', {id:roomName, password:pw, owner_id:userName});\n\t}\n\n\t//chat list modal\n\tconst [ChatListModalState, setChatListModalState] = useState(false);\n\tconst openChatListModal = () => {\n\t\tsetChatListModalState(true);\n\t}\n\tconst closeChatListModal = () => {\n\t\tsetChatListModalState(false);\n\t}\n\tasync function makeNewChat(){\n\t\t//userName = userName ? userName : sessionStorage.getItem(\"userName\")\n\t\t//await axios.post('/RoomList', {id:roomName, password:pw, owner_id:userName});\n\t}\n\n\tconst [NewRoomName, setNewRoomName] = useState(\"\");\n\t//const [, setRoomName] = useState(\"\");\n\tconst handleRoomNameChange = useCallback((e:any) => {\n\t\tsetNewRoomName(e.target.value);\n\t\t//checkedRoomInfo(e.target.value)\n\t}, []);\n\t// private room checkbox\n\tconst [IsPrivateRoom, setIsPrivateRoom] = useState(false);\n\tconst PrivateRoomCheckHandler = useCallback( (e:any) => {\n\t\tsetIsPrivateRoom(!IsPrivateRoom);\n\t},[IsPrivateRoom]);\n\t// room pwd\n\tconst [RoomPWD, setRoomPWD] = useState(\"\");\n\tconst handelRoomPWD = useCallback((e:any) => {\n\t\tsetRoomPWD(e.target.value)\n\t}, []);\n\n\n\n\treturn (\n\t<div id=\"App-Container\">\n\t\t<span className=\"App-Left\">\n\t\t\t<div className=\"list-box\">\n\t\t\t\t<div className=\"listName\">\n\t\t\t\t\tGame\n\t\t\t\t\t<button type=\"button\" className=\"plusbtn\" onClick={openGameListModal}>\n\t\t\t\t\t\t<img src={plusbtn} width=\"30\" height=\"30\"/>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<GameListModal open={GameListModalState} close={closeGameListModal} header=\"New Game\" makeRoom={makeNewGame}>\n\t\t\t\t\t<span><input type=\"radio\" name=\"speed\" value=\"5\" /> easy &nbsp;&nbsp;</span>\n\t\t\t\t\t<span><input type=\"radio\" name=\"speed\" value=\"10\" /> normal &nbsp;&nbsp;</span>\n\t\t\t\t\t<span><input type=\"radio\" name=\"speed\" value=\"20\" /> hard </span>\n\t\t\t\t</GameListModal>\n\t\t\t\t<hr/>\n\n\t\t\t\t{gameList?.map(gameRoom=>\n\t\t\t\t\t<button type=\"button\" className=\"roomList\">\n\t\t\t\t\t\t<span className=\"roomList-left\">\n\t\t\t\t\t\t\t<div className=\"roomList-icon\">\n\t\t\t\t\t\t\t{gameRoom.mode === \"normal\" ? 'N' : <img src={speed} width=\"30\" height=\"30\"/>}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<span className=\"roomList-right\">\n\t\t\t\t\t\t\t<div className=\"player\">{gameRoom.player1}</div>\n\t\t\t\t\t\t\t<div>vs</div>\n\t\t\t\t\t\t\t<div className=\"player\">{gameRoom.player2}</div>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</button>\n\t\t\t\t)}\n\t\t\t</div>\n\n\t\t\t<div className=\"list-box\">\n\t\t\t\t<div className=\"listName\">\n\t\t\t\t\tChat<button type=\"button\" className=\"plusbtn\" onClick={openChatListModal}><img src={plusbtn} width=\"30\" height=\"30\"/></button>\n\t\t\t\t</div>\n\t\t\t\t<ChatListModal open={ChatListModalState} close={closeChatListModal} header=\"New Chatting Room\" makeRoom={makeNewChat}>\n\t\t\t\t\t<label >\n\t\t\t\t\t\t<b>Room Name:&nbsp;</b>\n\t\t\t\t\t\t<input onChange={handleRoomNameChange}></input>\n\t\t\t\t\t</label>\n\t\t\t\t\t<label>\n\t\t\t\t\t\t&nbsp;&nbsp;<input type=\"checkbox\" checked={IsPrivateRoom} onChange={(e) => PrivateRoomCheckHandler(e)} ></input> private\n\t\t\t\t\t</label>\n\t\t\t\t\t{IsPrivateRoom ?\n\t\t\t\t\t\t<div className=\"checkbox-pwd\">\n\t\t\t\t\t\t<b>&nbsp;&nbsp;&nbsp;&nbsp;password:&nbsp;</b>\n\t\t\t\t\t\t<input type=\"password\" onChange={handelRoomPWD}></input>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t: null\n\t\t\t\t\t}\n\t\t\t\t</ChatListModal>\n\t\t\t\t<hr/>\n\n\t\t\t\t{chatList?.map(chatRoom=>\n\t\t\t\t\t<button type=\"button\" className=\"roomList\">\n\t\t\t\t\t<span className=\"roomList-left\">\n\t\t\t\t\t\t<div className=\"roomList-num\">{chatRoom.num}</div>\n\t\t\t\t\t</span>\n\t\t\t\t\t<span className=\"roomList-right\">\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t{chatRoom.password != \"\" ? <img src={lock_icon} width=\"20\" height=\"20\"></img> : null}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"player\">\n\t\t\t\t\t\t\t{chatRoom.id}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</span>\n\t\t\t\t\t</button>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</span>\n\t\t<span className=\"App-Right\">\n\t\t\t<RightList />\n\t\t</span>\n\t</div>\n\t)\n}\n\nexport default Lobby;","/Users/jinkim/bye_blackhole/client/src/Lobby/RightList.tsx",["120","121","122","123","124","125","126","127","128"],"import axios from \"axios\";\nimport {useEffect, useState} from \"react\";\nimport \"./styles/RightList.scss\"\nimport images from '../images/Images'\nimport userIcon from '../images/gamer_boy.png'\nimport UserInfoModal from \"./UserInfoModal\";\n\nconst RightList = () => {\n\t\n\tconst [friendsList, setFriendsList] = useState<{id:string, icon:string ,state:string}[]>([{id:\"jinkim_online\", icon:\"gamer_boy\", state:\"online\"}, {id:\"jinkim_offline\", icon:\"gamer_keyboard\", state:\"offline\"}, {id:\"jinkim_gaming\", icon:\"gamer_girl\", state:\"gaming\"}]);\n\n\tconst [othersList, setOthersList] = useState<{id:string, icon:string ,state:string}[]>([{id:\"jinkim_online\", icon:\"gamer_woman\", state:\"online\"}, {id:\"jinkim_offline\", icon:\"woman_icon\", state:\"offline\"}, {id:\"jinkim_gaming\", icon:\"man_icon\", state:\"gaming\"}]);\n\n\tconst [myChatList, setMyChatList] = useState<{id:string, num:number}[]>([{id:\"chat_r1asdfasdfasdf\", num:5}, {id:\"chat_r2\", num:1},{id:\"chat_r1\", num:5}]);\n\n\tuseEffect(() => {\n\t\tasync function get() {\n\t\t\t//const res = await axios.get('')\n\t\t\t//setFriendsList(res.data)\n\t\t\t\n\t\t\t//const res = await axios.get('')\n\t\t\t//setOthersList(res.data)\n\t\t\t\n\t\t\t//const res = await axios.get('')\n\t\t\t//setMyChatList(res.data)\n\t\t}\n\t\tget();\n\t})\n\n\n\tconst [WinLoseNum, setWinLoseNum] = useState<{win:number, lose:number}>({win:4, lose:0})\n\tconst [MatchHistory, setMatchHistory] = useState<{id:string, result:boolean}[]>([{id:'jachoi', result:true}, {id:'dsohn', result:false}, {id:'taekkim', result:true}, {id:'sayi', result:true}]);\n\tasync function getProfile(id:string) {\n\t\tconsole.log('getProfile!!')\n\t\t//const profile = await axios.get('profile/' + id)\n\t\t//setWinLoseNum({win:profile.data.win, lose:profile.data.lose})\n\n\t\t//const match = await axios.get('profile/' + id + '/match')\n\t\t//setMatchHistory(match.data)\n\t}\n\n\t//UserInfoModal\n\tconst [ModalID, setModalID] = useState('');\n\tconst [UserInfoModalState, setUserInfoModalState] = useState(false);\n\tconst openUserInfoModal = (id:string) => {\n\t\tsetUserInfoModalState(true);\n\t\tsetModalID(id);\n\t\tgetProfile(id);\n\t}\n\tconst closeUserInfoModal = () => {\n\t\tsetUserInfoModalState(false);\n\t}\n\n\t\n\n\treturn(\n\t<span>\n\t<div className=\"top\">\n\t\tjinkim\n\t\t<button type=\"button\" className=\"myIcon\" onClick={() => openUserInfoModal('jinkim')}>\n\t\t\t<img src={userIcon} width=\"30\" height=\"30\"></img>\n\t\t</button>\n\t</div>\n\t<div className=\"bottom\">\n\t\t<div className=\"title\"># friends</div>\n\t\t{friendsList?.map(user=>\n\t\t\t<button type=\"button\" className=\"user-btn\" onClick={() => openUserInfoModal(user.id)}>\n\t\t\t\t<img src={images(user.icon)}  width=\"20\" height=\"20\" className=\"user-icon\"/>\n\t\t\t\t{user.state === \"online\" ? <span className=\"userState online\">·</span> : null}\n\t\t\t\t{user.state === \"offline\" ? <span className=\"userState offline\">·</span> : null}\n\t\t\t\t{user.state === \"gaming\" ? <span className=\"userState gaming\">·</span> : null}\n\t\t\t\t{user.id}\n\t\t\t</button>\n\t\t)}\n\t\t\t\n\t\t<div className=\"title\"># others</div>\n\t\t{othersList?.map(user=>\n\t\t\t<button type=\"button\" className=\"user-btn\" onClick={() => openUserInfoModal(user.id)}>\n\t\t\t\t<img src={images(user.icon)}  width=\"20\" height=\"20\" className=\"user-icon\"/>\n\t\t\t\t{user.state === \"online\" ? <span className=\"userState online\">·</span> : null}\n\t\t\t\t{user.state === \"offline\" ? <span className=\"userState offline\">·</span> : null}\n\t\t\t\t{user.state === \"gaming\" ? <span className=\"userState gaming\">·</span> : null}\n\t\t\t\t{user.id}\n\t\t\t</button>\n\t\t)}\n\t\t<div className=\"title\"># my chats</div>\n\t\t{myChatList?.map(chat=>\n\t\t\t<div className=\"chat\">\n\t\t\t<button type=\"button\" className=\"chat-btn\" onClick={() => document.location.href = '/Chat/' + chat.id}>\n\t\t\t\t<span className=\"chatNum\">{chat.num}</span>\n\t\t\t\t<span>&nbsp;{chat.id}</span>\n\t\t\t</button>\n\t\t\t\t<button type=\"button\" className=\"chatLeave\">X</button>\n\t\t\t</div>\n\t\t)}\n\n\t\t<UserInfoModal open={UserInfoModalState} close={closeUserInfoModal} myID='jinkim' targetID={ModalID} WinLoseNum={WinLoseNum} MatchHistory={MatchHistory} />\n\t</div>\n\t</span>\n\t)\n}\nexport default RightList;","/Users/jinkim/bye_blackhole/client/src/Lobby/GameListModal.tsx",[],"/Users/jinkim/bye_blackhole/client/src/Lobby/ChatListModal.tsx",[],"/Users/jinkim/bye_blackhole/client/src/Lobby/UserInfoModal.tsx",["129"],"import React from 'react';\nimport \"./styles/UserInfoModal.scss\";\n\ninterface Iprops {\n\topen: any,\n\tclose: any,\n\tmyID: string,\n\ttargetID: string,\n\tWinLoseNum: {win:number, lose:number},\n\tMatchHistory: {id:string, result:boolean}[],\n}\n\nconst UserInfoModal = ( props: Iprops ) => {\n\tconst { open, close, myID, targetID, WinLoseNum, MatchHistory} = props;\n\n\treturn (\n\t\t<div className={ open ? 'openModal Modal' : 'Modal' }>\n\t\t\t{ open ? (\n\t\t\t\t<section>\n\t\t\t\t\t<div className=\"head\">\n\t\t\t\t\t\t<button className=\"close\" onClick={close}> &times; </button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"content\">\n\t\t\t\t\t\t<div className=\"header\">\n\t\t\t\t\t\t\t<div className=\"name\">{targetID}</div>\n\t\t\t\t\t\t\t<span className=\"num win-color\">W {WinLoseNum.win}</span>\n\t\t\t\t\t\t\t<span className=\"num lose-color\"> &nbsp;&nbsp; L {WinLoseNum.lose}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<hr/>\n\t\t\t\t\t\t<div className=\"main\">\n\t\t\t\t\t\t\t{MatchHistory?.map(match=>\n\t\t\t\t\t\t\t<div className={match.result ? 'matchHistory win-backColor' : 'matchHistory lose-backColor'}>\n\t\t\t\t\t\t\t\t<span className='match-left'>{match.id}</span>\n\t\t\t\t\t\t\t\t<span className={match.result ? 'match-right win-color' : 'match-right lose-color'}>{match.result ? 'Win' : 'Lose'}</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"bottom\">\n\t\t\t\t\t{myID === targetID ? \n\t\t\t\t\t\t<a className=\"btn button\" onClick={()=> document.location.href = '/Admin/' + targetID}><b>Admin</b></a> :\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t<span className=\"onoffbtn\">\n\t\t\t\t\t\t\t<input type=\"checkbox\" id=\"switch1\" name=\"switch1\" className=\"input__on-off\"/>\n\t\t\t\t\t\t\t<label htmlFor=\"switch1\" className=\"label__on-off\">\n\t\t\t\t\t\t\t\t<span className=\"marble\"></span>\n\t\t\t\t\t\t\t\t<span className=\"on\">Friend</span>\n\t\t\t\t\t\t\t\t<span className=\"off\">Unfriend</span>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<span className=\"onoffbtn\">\n\t\t\t\t\t\t\t<input type=\"checkbox\" id=\"switch2\" name=\"switch2\" className=\"input__on-off\"/>\n\t\t\t\t\t\t\t<label htmlFor=\"switch2\" className=\"label__on-off\">\n\t\t\t\t\t\t\t\t<span className=\"marble\"></span>\n\t\t\t\t\t\t\t\t<span className=\"on\">Unblock</span>\n\t\t\t\t\t\t\t\t<span className=\"off\">Block</span>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<div><a className=\"btn button\" href=\"/Game\"><b>Game</b></a></div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t}\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\t\t\t) : null }\n\t\t</div>\n\t)\n}\n\nexport default UserInfoModal","/Users/jinkim/bye_blackhole/client/src/Chat/Home.tsx",["130"],"/Users/jinkim/bye_blackhole/client/src/Chat/RoomList.tsx",["131","132","133","134","135","136","137"],"import React, {useEffect, useState, useCallback, VFC} from \"react\";\nimport \"./styles/RoomList.scss\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport MakeRoomModal from './MakeRoomModal';\nimport PwRoomModal from './PwRoomModal';\nimport NoEntryModal from './NoEntryModal'\nimport axios from 'axios';\nimport lock_icon from '../images/private.png'\n\ninterface HomeObj{\n\tuserName:any,\n\troomName:any,\n\tsetRoomName:(value:any)=>void,\n}\n\nconst RoomList : VFC<HomeObj>  = ({ userName, roomName, setRoomName}) => {\n  const handleRoomNameChange = useCallback((e:any) => {\n    setRoomName(e.target.value);\n\tcheckedRoomInfo(e.target.value)\n  }, []);\n\n  //password\n  const [pw, setPw] = useState(\"\");\n  const handPwChange = useCallback((e:any) => {\n    setPw(e.target.value);\n  }, []);\n\n  const [bChecked, setChecked] = useState(false);\n  const checkHandler = useCallback( (e:any) => {\n    setChecked(!bChecked);\n  },[bChecked]);\n\n\n  //makeRoomModal\n  const [makeRoomModalOpen, setMakeRoomModalOpen] = useState(false);\n  const openMakeRoomModal = () => {\n\tsetMakeRoomModalOpen(true);\n  }\n  const closeMakeRoomModal = () => {\n\tsetMakeRoomModalOpen(false);\n  }\n  //pwRoomModal\n  const [pwRoomModalOpen, setPwRoomModalOpen] = useState(false);\n  const openPwRoomModal = () => {\n\tsetPwRoomModalOpen(true);\n  }\n  const closePwRoomModal = () => {\n\tsetPwRoomModalOpen(false);\n\tsetTryAgain(false)\n  }\n  //NoEntryModal\n  const [noEntryModalOpen, setNoEntryModalOpen] = useState(false);\n  const openNoEntryModal = () => {\n\tsetNoEntryModalOpen(true);\n  }\n  const closeNoEntryModal = () => {\n\tsetNoEntryModalOpen(false);\n  }\n\n  sessionStorage.setItem(\"roomName\", roomName);\n\n  const [roomListInfo, setRoomListInfo] = useState<{id:string, password:string, owner_id:string, num:number}[]>();\n\n  useEffect(() => {\n\tgetRoomList()\n  }, [])\n\n  async function makeRoom(){\n\t  userName = userName ? userName : sessionStorage.getItem(\"userName\")\n\t  await axios.post('/RoomList', {id:roomName, password:pw, owner_id:userName});\n  }\n\n  async function getRoomList() {\n\t  const res = await axios.get('/RoomList/list');\n\t  setRoomListInfo(res.data)\n\t  //setRoomListInfo([{id:\"r1\", password:\"1234\", owner_id:\"oid1\", num:1}, {id:\"r1\", password:\"\", owner_id:\"oid1\", num:1}])\n  }\n\n\n  const [roomInfo, setRoomInfo] = useState<{id:String, password:String, owner_id:String, num:number}>();\n\n  function checkedRoomInfo(roomId:string)\n  {\n\t  roomListInfo?.map(room=>{\n\t\t  if (room.id === roomId)\n\t\t  setRoomInfo(room)\n\t\t})\n  }\n\n\n  async function enterRoom()\n  {\n\tawait axios.patch('/RoomList/incNum/' + roomName)\n\tdocument.location.href = '/Chat';\n  }\n\n  async function enterTheRoom() {\n\t  if (roomInfo)\n\t  {\n\t\t\tif (roomInfo.num >= 10) //입장불가 modal\n\t\t\t\topenNoEntryModal()\n\t\t\telse if (roomInfo.num < 10 && roomInfo.password == \"\") //페이지 이동\n\t\t\t\tenterRoom()\n\t\t\telse //비밀번호 입력 modal\n\t\t\t\topenPwRoomModal()\n\t\t}\n\t}\n\n\t//input password check\n\tconst [inputPw, setInputPw] = useState();\n\tconst handleInputPwChange = (e:any) => {\n\t\tsetInputPw(e.target.value);\n\t};\n\n\t// password try again\n\tconst [tryAgain, setTryAgain] = useState(false);\n\n\tasync function enterPrivateRoom() {\n\t\tif (inputPw === roomInfo?.password)\n\t\t\tenterRoom()\n\t\telse\n\t\t\tsetTryAgain(true);\n\t}\n\n\n  return (\n    <div className=\"RoomList-container\">\n\t\t<div className=\"makeRoom-box\">\n\t\t\t<a className=\"btn btn-primary btn-sm makeRoom\" onClick={openMakeRoomModal}><b>방 만들기</b></a>\n\t\t\t<MakeRoomModal open={makeRoomModalOpen} close={closeMakeRoomModal} header=\"방 만들기\" makeRoom={makeRoom}>\n\t\t\t\t<label >\n\t\t\t\t\t<b>&nbsp;방 제목&nbsp;&nbsp;&nbsp;</b>\n\t\t\t\t\t<input onChange={handleRoomNameChange}></input>\n\t\t\t\t</label>\n\t\t\t\t<label>\n\t\t\t\t\t&nbsp;&nbsp;<input type=\"checkbox\" checked={bChecked} onChange={(e) => checkHandler(e)} ></input> private\n\t\t\t\t</label>\n\t\t\t\t{bChecked ?\n\t\t\t\t\t<div className=\"checkbox-pw\">\n\t\t\t\t\t<b>비밀번호&nbsp;</b>\n\t\t\t\t\t<input type=\"password\" onChange={handPwChange}></input>\n\t\t\t\t\t</div>\n\t\t\t\t\t: null\n\t\t\t\t}\n\t\t\t</MakeRoomModal>\n\t\t</div>\n\t\t<div className=\"middle\">\n\t\t\t{roomListInfo?.map(room=>\n\t\t\t\t<label>\n\t\t\t\t\t<input type=\"radio\" name=\"room\" value={room.id} onChange={handleRoomNameChange}/>\n\t\t\t\t\t<div className=\"box\">\n\t\t\t\t\t\t<div>{room.id}</div>\n\t\t\t\t\t\t<span className=\"lock-image\">{room.password != \"\" ? <img src={lock_icon} width=\"20\" height=\"20\"></img> : null}</span>\n\t\t\t\t\t\t<span className=\"room-num\">10/{room.num}</span>\n\t\t\t\t\t</div>\n\t\t\t\t</label>\n\t\t\t)}\n\t\t</div>\n\t\t<div className=\"Join-button\">\n\t\t\t<a className=\"btn btn-dark\" onClick={enterTheRoom}><b>입장하기</b></a>\n\t\t\t<NoEntryModal open={noEntryModalOpen} close={closeNoEntryModal} >\n\t\t\t\t정원이 다 찼습니다.\n\t\t\t</NoEntryModal>\n\t\t\t<PwRoomModal open={pwRoomModalOpen} close={closePwRoomModal} header=\"입장하기\" enterRoom={enterPrivateRoom}>\n\t\t\t\t<label>\n\t\t\t\t\t<b>비밀번호&nbsp;</b>\n\t\t\t\t\t<input type=\"password\" onChange={handleInputPwChange}></input>\n\t\t\t\t\t{tryAgain ? <span className=\"tryAgain\">&nbsp;다시 시도하십시오</span> : null}\n\t\t\t\t</label>\n\t\t\t</PwRoomModal>\n\t\t</div>\n    </div>\n  );\n};\n\nexport default RoomList;","/Users/jinkim/bye_blackhole/client/src/Chat/UserList.tsx",["138","139","140","141","142","143","144"],"import React, { useCallback, useEffect, useState } from \"react\";\nimport \"./styles/UserList.scss\"\nimport images from '../images/Images'\nimport crown from '../images/crown.png'\nimport UserListModal from './UserListModal'\nimport axios from \"axios\";\n\nconst UserList = ({ socket }: any) => {\n\tconst [userList, setUserList] = useState<{id: string, icon:string, status:string}[]>([{id:'2222', icon:'woman_icon', status:'administrator'}, {id:'3333', icon:'man_icon', status:'none'}, {id:'jinkim', icon:'gamer_boy', status:'owner'}, {id:'2222', icon:'woman_icon', status:'administrator'}, {id:'3333', icon:'man_icon', status:'none'}]);\n\n\tconst [myInfo, setMyInfo] = useState<{id: string, status:string}>({id:'jinkim', status:'administrator'})\n\n\tuseEffect(() => {\n\t\tsocket.on(\"UserList\", (newUser:{id: string, icon:string, status:string}[]) => {\n\t\t\tsetUserList(newUser);\n\t\t\tuserSorting();\n\t\t});\n\n\t\treturn () => {\n\t\t\tsocket.disconnect();\n\t\t};\n\t}, [socket]);\n\n\tfunction userSorting()\n\t{\n\t\tconst owner = userList.find((ele) => {\n\t\t\tif (ele.status === 'owner')\n\t\t\t\treturn true;\n\t\t})\n\t\tlet tmp = [{id:owner?.id, icon: owner?.icon, status:owner?.status}]\n\n\t\tlet idx = userList.indexOf(owner as never)\n\t\tif (idx > -1) userList.splice(idx, 1)\n\n\t\tuserList.forEach((ele) => {\n\t\t\tif (ele.status === 'administrator')\n\t\t\t{\n\t\t\t\ttmp.push(ele);\n\t\t\t\tidx = userList.indexOf(ele as never)\n\t\t\t\tif (idx > -1) userList.splice(idx, 1)\n\t\t\t}\n\t\t})\n\n\t\tuserList.forEach((ele) => { tmp.push(ele); })\n\t\tsetUserList(tmp as never);\n\t}\n\n\t//UserListModal\n\tconst [chatUser, setChatUser] = useState('')\n\tconst [UserListModalState, setUserListModalState] = useState(false);\n\tconst openUserListModal = (id:string) => {\n\t\tsetUserListModalState(true);\n\t\tsetChatUser(id);\n\t}\n\tconst closeUserListModal = () => {\n\t\tsetUserListModalState(false);\n\t}\n\n\t//owner button\n\tasync function plusBtn(id:string){\n\t\t//const rtn = await axios.get('chat/chatRoomID/admin/plus' + id)\n\t\t//setUserList(rtn.data)\n\n\t}\n\tasync function minusBtn(id:string){\n\t\t//await axios.get('chat/chatRoomID/admin/minus' + id)\n\t\t//setUserList(rtn.data)\n\t}\n\n\treturn (\n\t\t<div className=\"userList-container\">\n\t\t\t{userList?.map(user=>\n\t\t\t<div className=\"userList-box\">\n\t\t\t\t<button className=\"userList-btn\" onClick={() => myInfo.status === 'administrator' && 'jinkim' !== user.id && user.status === 'none' ? openUserListModal(user.id): null}>\n\t\t\t\t\t<span className=\"iconBox\">\n\t\t\t\t\t\t<span><img src={images(user.icon)} width=\"30\" height=\"30\" className=\"icon\"/></span>\n\t\t\t\t\t\t<span>{user.status !== 'none' ?\n\t\t\t\t\t\t\t<img src={crown} width=\"20\" height=\"20\" className={user.status === 'owner' ? 'crown owner' : 'crown administrator'}/>\n\t\t\t\t\t\t\t: null\n\t\t\t\t\t\t}</span>\n\t\t\t\t\t</span>\n\t\t\t\t\t<span className='id'>{user.id}</span>\n\t\t\t\t</button>\n\t\t\t\t<span>{myInfo.status === 'owner' && user.status === 'none' ?\n\t\t\t\t\t<button className=\"owner-plusBtn\" onClick={() => plusBtn(user.id)}>+</button>\n\t\t\t\t\t: null\n\t\t\t\t}</span>\n\t\t\t\t<span>{myInfo.status === 'owner' && user.status === 'administrator' ?\n\t\t\t\t\t<button className=\"owner-xBtn\" onClick={() => minusBtn(user.id)}>x</button>\n\t\t\t\t\t: null\n\t\t\t\t}</span>\n\t\t\t</div>\n\t\t\t)}\n\t\t\t<UserListModal open={UserListModalState} close={closeUserListModal} targetID={chatUser}></UserListModal>\n\t\t</div>\n\n\t);\n  };\n  export default UserList;\n","/Users/jinkim/bye_blackhole/client/src/Chat/ChatLog.tsx",["145","146"],"import React, { useEffect, useState } from \"react\";\nimport \"./styles/ChatLog.scss\";\nimport images from '../images/Images'\n\n\nconst ChatLog = ({ userName, socket }: any) => {\n\tconst [msgList, setMsgList] = useState<any[]>([{userName:'jinkim', icon:'gamer_boy', msg:'hello', timeStamp:'2021-01-01 00:00'}, {myMsg:'mymsgworlddddddddddddddddddddddddddddddddddddddasdfasdfasdfasdf', timeStamp:'2021-01-01 00:00'}, {sysMsg:'sysMsg님이 입장했습니다'},{userName:'2222', icon:'gamer_girl',msg:'worlddddddddddddddddddddddddddddddddddddddasdfasdfasdfasdf', timeStamp:'2021-01-01 00:00'}, {myMsg:'mymsg', timeStamp:'2021-01-01 00:00'},{myMsg:'mymsgworlddddddddddddddddddddddddddddddddddddddasdfasdfasdfasdf', timeStamp:'2021-01-01 00:00'}, {userName:'2222', icon:'gamer_girl',msg:'worlddddddddddddddddddddddddddddddddddddddasdfasdfasdfasdf', timeStamp:'2021-01-01 00:00'}, {userName:'2222', icon:'gamer_girl',msg:'worlddddddddddddddddddddddddddddddddddddddasdfasdfasdfasdf', timeStamp:'2021-01-01 00:00'}, {userName:'2222', icon:'gamer_girl',msg:'worlddddddddddddddddddddddddddddddddddddddasdfasdfasdfasdf', timeStamp:'2021-01-01 00:00'}, {userName:'2222', icon:'gamer_girl',msg:'worlddddddddddddddddddddddddddddddddddddddasdfasdfasdfasdf', timeStamp:'2021-01-01 00:00'}, {userName:'2222', icon:'gamer_girl',msg:'worlddddddddddddddddddddddddddddddddddddddasdfasdfasdfasdf', timeStamp:'2021-01-01 00:00'}, {userName:'2222', icon:'gamer_girl',msg:'worlddddddddddddddddddddddddddddddddddddddasdfasdfasdfasdf', timeStamp:'2021-01-01 00:00'}, {userName:'2222', icon:'gamer_girl',msg:'worlddddddddddddddddddddddddddddddddddddddasdfasdfasdfasdf', timeStamp:'2021-01-01 00:00'}, {userName:'2222', icon:'gamer_girl',msg:'worlddddddddddddddddddddddddddddddddddddddasdfasdfasdfasdf', timeStamp:'2021-01-01 00:00'}]);\n\n\tuseEffect(() => {\n\t\t// messsgeItem : {msg: String, name: String, timeStamp: String}\n\t\tsocket.on(\"onReceive\", (messageItem: {userName:string, msg:string, timeStamp:string}) => {\n\t\t\tuserName = userName ? userName : sessionStorage.getItem(\"userName\")\n\t\t\tif (userName === messageItem.userName)\n\t\t\t\tsetMsgList((msgList) => [...msgList, {myMsg: messageItem.msg, timeStamp: messageItem.timeStamp} as never]);\n\t\t\telse\n\t\t\t\tsetMsgList((msgList) => [...msgList, messageItem]);\n\t\t\tconsole.log(messageItem);\n\t\t\tconsole.log(userName)\n\t\t});\n\t\tsocket.on(\"onConnect\", (systemMessage: string) => {\n\t\t\tsetMsgList((msgList) => [...msgList, { sysMsg: systemMessage } as never]);\n\t\t});\n\t\tsocket.on(\"onDisconnect\", (systemMessage: any) => {\n\t\t\tsetMsgList((msgList) => [...msgList, { sysMsg: systemMessage } as never]);\n\t\t});\n\t\treturn () => {\n\t\t\tsocket.disconnect();\n\t\t};\n\t}, [socket]);\n\n\treturn (\n\t<div>\n\t\t{msgList.map((msg, idx) => (\n\t\t<div key={idx}>\n\t\t\t{msg.msg &&\n\t\t\t\t<div className=\"msgLeft\">\n\t\t\t\t\t<span><img src={images(msg.icon)}  width=\"30\" height=\"30\" className=\"msg-icon\"/></span>\n\t\t\t\t\t<span>\n\t\t\t\t\t\t{msg.userName && <div className=\"msg-userName\">{msg.userName}</div>}\n\t\t\t\t\t\t<div className=\"msg-left\">{msg.msg}</div>\n\t\t\t\t\t</span>\n\t\t\t\t\t<span className=\"msg-timeStamp\">({msg.timeStamp})</span>\n\t\t\t\t</div>\n\t\t\t}\n\t\t\t{msg.myMsg &&\n\t\t\t\t<div className=\"msgRight\">\n\t\t\t\t\t<span className=\"msg-right\">{msg.myMsg}</span>\n\t\t\t\t\t<span className=\"msg-timeStamp\">({msg.timeStamp})</span>\n\t\t\t\t</div>\n\t\t\t}\n\t\t\t<div className=\"sysMsg\" >{msg.sysMsg}</div>\n\t\t</div>\n\t\t))}\n\t</div>\n\t);\n};\n\nexport default ChatLog;","/Users/jinkim/bye_blackhole/client/src/Chat/ChatInput.tsx",["147","148"],"import React, { useRef, useState } from \"react\";\nimport \"./styles/ChatInput.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport {Button} from \"react-bootstrap\";\n\nconst socketIOClient = require('socket.io-client')\n\n\nconst ChatInput = ({ userName, socket }: any) => {\n  const [chatMessage, setChatMessage] = useState(\"\");\n\n  const handleSubmit = (e:any) => {\n    e.preventDefault();\n    socket.emit(\"onSend\", {\n      userName: userName ? userName : sessionStorage.getItem(\"userName\"),\n      msg: chatMessage,\n      timeStamp: new Date().toLocaleTimeString(),\n    });\n    setChatMessage(\"\");\n  };\n\n  const onChatMessageChange = (e:any) => {\n    setChatMessage(e.target.value);\n  };\n\n  return (\n    <div>\n      <form className=\"ChatInput-form\" onSubmit={handleSubmit}>\n        <input type=\"text\" className=\"form-control\"\n          placeholder=\"Enter message\"\n          value={chatMessage}\n          onChange={onChatMessageChange}\n        ></input>\n        <Button type=\"button\" className=\"btn btn-sm\">send</Button>\n      </form>\n    </div>\n  );\n};\n\nexport default ChatInput;","/Users/jinkim/bye_blackhole/client/src/Chat/Images.tsx",[],"/Users/jinkim/bye_blackhole/client/src/Chat/MakeRoomModal.tsx",[],"/Users/jinkim/bye_blackhole/client/src/Chat/Loading.tsx",[],"/Users/jinkim/bye_blackhole/client/src/Chat/PwRoomModal.tsx",["149"],"import React from 'react';\nimport \"./styles/MakeRoomModal.css\";\n\nconst PwRoomModal = ( props: any ) => {\n    const { open, close, header, enterRoom } = props;\n\n    return (\n        <div className={ open ? 'openMakeRoomModal MakeRoomModal' : 'MakeRoomModal' }>\n            { open ? (\n                <section>\n                    <header>\n                        {header}\n                        <button className=\"close\" onClick={close}> &times; </button>\n                    </header>\n                    <main>\n                        {props.children}\n                    </main>\n                    <footer>\n\t\t\t\t\t\t<a className=\"btn btn-dark\" onClick={enterRoom}><b>확인</b></a>\n                    </footer>\n                </section>\n            ) : null }\n        </div>\n    )\n}\n\nexport default PwRoomModal","/Users/jinkim/bye_blackhole/client/src/Chat/NoEntryModal.tsx",[],"/Users/jinkim/bye_blackhole/client/src/images/Images.tsx",["150","151","152","153","154","155"],"import gamer_boy from '../images/gamer_boy.png'\nimport gamer_girl from '../images/gamer_girl.png'\nimport gamer_keyboard from '../images/gamer_keyboard.png'\nimport gamer_woman from '../images/gamer_woman.png'\nimport man_icon from '../images/man_icon.png'\nimport woman_icon from '../images/woman_icon.png'\n\n\nconst images = (icon_name:string) => {\n\tif ('gamer_boy' == icon_name)\n\t\treturn (gamer_boy)\n\telse if('gamer_girl' == icon_name)\n\t\treturn (gamer_girl)\n\telse if('gamer_keyboard' == icon_name)\n\t\treturn (gamer_keyboard)\n\telse if('gamer_woman' == icon_name)\n\t\treturn (gamer_woman)\n\telse if('man_icon' == icon_name)\n\t\treturn (man_icon)\n\telse if('woman_icon' == icon_name)\n\t\treturn (woman_icon)\n}\nexport default images;","/Users/jinkim/bye_blackhole/client/src/Chat/UserListModal.tsx",["156","157"],"import axios from 'axios';\nimport React from 'react';\nimport \"../Lobby/styles/UserInfoModal.scss\";\n\nconst UserListModal = ( props: any ) => {\n\tconst { open, close, targetID} = props;\n\n\tasync function kickUser(){\n\t\t//await axios.post('chat/' + chatRoomID + '/kick/' + targetID)\n\t\t\n\t}\n\n\treturn (\n\t\t<div className={ open ? 'openModal Modal' : 'Modal' }>\n\t\t\t{ open ? (\n\t\t\t\t<section>\n\t\t\t\t\t<div className=\"head\">\n\t\t\t\t\t\t<button className=\"close\" onClick={close}> &times; </button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"content\">\n\t\t\t\t\t\t{targetID}\n\t\t\t\t\t</div>\n\t\t\t\t\t<hr/>\n\t\t\t\t\t<div className='bottom'>\n\t\t\t\t\t\t<span className=\"onoffbtn\">\n\t\t\t\t\t\t\t<input type=\"checkbox\" id=\"switch1\" name=\"switch1\" className=\"input__on-off\"/>\n\t\t\t\t\t\t\t<label htmlFor=\"switch1\" className=\"label__on-off\">\n\t\t\t\t\t\t\t\t<span className=\"marble\"></span>\n\t\t\t\t\t\t\t\t<span className=\"on\">Mute</span>\n\t\t\t\t\t\t\t\t<span className=\"off\">Unmute</span>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<input type=\"checkbox\" id=\"switch2\" name=\"switch2\" className=\"input__on-off\"/>\n\t\t\t\t\t\t\t<label htmlFor=\"switch2\" className=\"label__on-off\">\n\t\t\t\t\t\t\t\t<span className=\"marble\"></span>\n\t\t\t\t\t\t\t\t<span className=\"on\">Ban</span>\n\t\t\t\t\t\t\t\t<span className=\"off\">UnBan</span>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<div><a className=\"btn button\" onClick={kickUser}><b>Kick</b></a></div>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\t\t\t) : null }\n\t\t</div>\n\t)\n}\n\nexport default UserListModal","/Users/jinkim/bye_blackhole/client/src/Chat/ChatOwnerModal.tsx",["158","159","160"],"import axios from 'axios';\nimport React, {useState, useCallback} from 'react';\nimport \"../Lobby/styles/Modal.scss\";\n\nconst ChatOwnerModal = ( props: any ) => {\n\tconst { open, close, chatRoomID, pwd} = props;\n\n\tasync function changePWD(){\n\t\t//await axios.post('chat/' + chatRoomID + '/admin/')\n\t\tclose();\n\t}\n\n\tconst [RoomPWD, setRoomPWD] = useState(pwd);\n\tconst handelRoomPWD = useCallback((e:any) => {\n\t\tsetRoomPWD(e.target.value)\n\t}, []);\n\n\treturn (\n\t\t<div className={ open ? 'openModal Modal' : 'Modal' }>\n\t\t\t{ open ? (\n\t\t\t\t<section>\n\t\t\t\t\t<header>\n\t\t\t\t\t\tChange Password\n\t\t\t\t\t\t<button className=\"close\" onClick={close}> &times; </button>\n\t\t\t\t\t</header>\n\t\t\t\t\t<main>\n\t\t\t\t\t\tpassword:&nbsp;\n\t\t\t\t\t\t<input onChange={handelRoomPWD} value={RoomPWD}></input>\n\t\t\t\t\t</main>\n\t\t\t\t\t<footer>\n\t\t\t\t\t\t<a className=\"btn btn-primary\" onClick={changePWD}><b>Change</b></a>\n\t\t\t\t\t</footer>\n\t\t\t\t</section>\n\t\t\t) : null }\n\t\t</div>\n\t)\n}\n\nexport default ChatOwnerModal",{"ruleId":"161","replacedBy":"162"},{"ruleId":"163","replacedBy":"164"},{"ruleId":"161","replacedBy":"162"},{"ruleId":"163","replacedBy":"164"},{"ruleId":"165","severity":1,"message":"166","line":38,"column":19,"nodeType":"167","messageId":"168","endLine":38,"endColumn":30},{"ruleId":"169","severity":1,"message":"170","line":60,"column":7,"nodeType":"171","endLine":60,"endColumn":49},{"ruleId":"165","severity":1,"message":"172","line":1,"column":8,"nodeType":"167","messageId":"168","endLine":1,"endColumn":13},{"ruleId":"165","severity":1,"message":"173","line":14,"column":19,"nodeType":"167","messageId":"168","endLine":14,"endColumn":30},{"ruleId":"165","severity":1,"message":"174","line":16,"column":19,"nodeType":"167","messageId":"168","endLine":16,"endColumn":30},{"ruleId":"165","severity":1,"message":"175","line":57,"column":9,"nodeType":"167","messageId":"168","endLine":57,"endColumn":20},{"ruleId":"165","severity":1,"message":"176","line":69,"column":9,"nodeType":"167","messageId":"168","endLine":69,"endColumn":16},{"ruleId":"169","severity":1,"message":"170","line":83,"column":7,"nodeType":"171","endLine":83,"endColumn":50},{"ruleId":"169","severity":1,"message":"170","line":97,"column":44,"nodeType":"171","endLine":97,"endColumn":85},{"ruleId":"169","severity":1,"message":"170","line":111,"column":80,"nodeType":"171","endLine":111,"endColumn":123},{"ruleId":"177","severity":1,"message":"178","line":138,"column":27,"nodeType":"179","messageId":"180","endLine":138,"endColumn":29},{"ruleId":"169","severity":1,"message":"170","line":138,"column":35,"nodeType":"171","endLine":138,"endColumn":79},{"ruleId":"165","severity":1,"message":"172","line":1,"column":8,"nodeType":"167","messageId":"168","endLine":1,"endColumn":13},{"ruleId":"165","severity":1,"message":"181","line":10,"column":22,"nodeType":"167","messageId":"168","endLine":10,"endColumn":36},{"ruleId":"165","severity":1,"message":"182","line":12,"column":21,"nodeType":"167","messageId":"168","endLine":12,"endColumn":34},{"ruleId":"165","severity":1,"message":"183","line":14,"column":21,"nodeType":"167","messageId":"168","endLine":14,"endColumn":34},{"ruleId":"165","severity":1,"message":"184","line":31,"column":21,"nodeType":"167","messageId":"168","endLine":31,"endColumn":34},{"ruleId":"165","severity":1,"message":"185","line":32,"column":23,"nodeType":"167","messageId":"168","endLine":32,"endColumn":38},{"ruleId":"169","severity":1,"message":"170","line":61,"column":4,"nodeType":"171","endLine":61,"endColumn":47},{"ruleId":"169","severity":1,"message":"170","line":68,"column":5,"nodeType":"171","endLine":68,"endColumn":81},{"ruleId":"169","severity":1,"message":"170","line":79,"column":5,"nodeType":"171","endLine":79,"endColumn":81},{"ruleId":"186","severity":1,"message":"187","line":41,"column":7,"nodeType":"171","endLine":41,"endColumn":94},{"ruleId":"169","severity":1,"message":"170","line":33,"column":4,"nodeType":"171","endLine":33,"endColumn":63},{"ruleId":"188","severity":1,"message":"189","line":20,"column":6,"nodeType":"190","endLine":20,"endColumn":8,"suggestions":"191"},{"ruleId":"192","severity":1,"message":"193","line":84,"column":26,"nodeType":"194","messageId":"195","endLine":84,"endColumn":28},{"ruleId":"177","severity":1,"message":"196","line":102,"column":52,"nodeType":"179","messageId":"180","endLine":102,"endColumn":54},{"ruleId":"186","severity":1,"message":"187","line":129,"column":4,"nodeType":"171","endLine":129,"endColumn":79},{"ruleId":"177","severity":1,"message":"178","line":153,"column":51,"nodeType":"179","messageId":"180","endLine":153,"endColumn":53},{"ruleId":"169","severity":1,"message":"170","line":153,"column":59,"nodeType":"171","endLine":153,"endColumn":103},{"ruleId":"186","severity":1,"message":"187","line":160,"column":4,"nodeType":"171","endLine":160,"endColumn":55},{"ruleId":"165","severity":1,"message":"197","line":1,"column":17,"nodeType":"167","messageId":"168","endLine":1,"endColumn":28},{"ruleId":"165","severity":1,"message":"172","line":6,"column":8,"nodeType":"167","messageId":"168","endLine":6,"endColumn":13},{"ruleId":"165","severity":1,"message":"198","line":11,"column":17,"nodeType":"167","messageId":"168","endLine":11,"endColumn":26},{"ruleId":"188","severity":1,"message":"199","line":22,"column":5,"nodeType":"190","endLine":22,"endColumn":13,"suggestions":"200"},{"ruleId":"192","severity":1,"message":"201","line":26,"column":37,"nodeType":"194","messageId":"202","endLine":26,"endColumn":39},{"ruleId":"169","severity":1,"message":"170","line":76,"column":13,"nodeType":"171","endLine":76,"endColumn":83},{"ruleId":"169","severity":1,"message":"170","line":78,"column":8,"nodeType":"171","endLine":78,"endColumn":125},{"ruleId":"188","severity":1,"message":"203","line":12,"column":15,"nodeType":"204","endLine":12,"endColumn":71},{"ruleId":"169","severity":1,"message":"170","line":37,"column":12,"nodeType":"171","endLine":37,"endColumn":86},{"ruleId":"165","severity":1,"message":"205","line":1,"column":17,"nodeType":"167","messageId":"168","endLine":1,"endColumn":23},{"ruleId":"165","severity":1,"message":"206","line":6,"column":7,"nodeType":"167","messageId":"168","endLine":6,"endColumn":21},{"ruleId":"186","severity":1,"message":"187","line":19,"column":7,"nodeType":"171","endLine":19,"endColumn":55},{"ruleId":"177","severity":1,"message":"196","line":10,"column":18,"nodeType":"179","messageId":"180","endLine":10,"endColumn":20},{"ruleId":"177","severity":1,"message":"196","line":12,"column":23,"nodeType":"179","messageId":"180","endLine":12,"endColumn":25},{"ruleId":"177","severity":1,"message":"196","line":14,"column":27,"nodeType":"179","messageId":"180","endLine":14,"endColumn":29},{"ruleId":"177","severity":1,"message":"196","line":16,"column":24,"nodeType":"179","messageId":"180","endLine":16,"endColumn":26},{"ruleId":"177","severity":1,"message":"196","line":18,"column":21,"nodeType":"179","messageId":"180","endLine":18,"endColumn":23},{"ruleId":"177","severity":1,"message":"196","line":20,"column":23,"nodeType":"179","messageId":"180","endLine":20,"endColumn":25},{"ruleId":"165","severity":1,"message":"172","line":1,"column":8,"nodeType":"167","messageId":"168","endLine":1,"endColumn":13},{"ruleId":"186","severity":1,"message":"187","line":39,"column":12,"nodeType":"171","endLine":39,"endColumn":57},{"ruleId":"165","severity":1,"message":"172","line":1,"column":8,"nodeType":"167","messageId":"168","endLine":1,"endColumn":13},{"ruleId":"165","severity":1,"message":"207","line":6,"column":23,"nodeType":"167","messageId":"168","endLine":6,"endColumn":33},{"ruleId":"186","severity":1,"message":"187","line":31,"column":7,"nodeType":"171","endLine":31,"endColumn":58},"no-native-reassign",["208"],"no-negated-in-lhs",["209"],"@typescript-eslint/no-unused-vars","'setRoomInfo' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'axios' is defined but never used.","'setGameList' is assigned a value but never used.","'setChatList' is assigned a value but never used.","'NewRoomName' is assigned a value but never used.","'RoomPWD' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'setFriendsList' is assigned a value but never used.","'setOthersList' is assigned a value but never used.","'setMyChatList' is assigned a value but never used.","'setWinLoseNum' is assigned a value but never used.","'setMatchHistory' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","react-hooks/exhaustive-deps","React Hook useCallback has missing dependencies: 'checkedRoomInfo' and 'setRoomName'. Either include them or remove the dependency array. If 'setRoomName' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["210"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Expected '===' and instead saw '=='.","'useCallback' is defined but never used.","'setMyInfo' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'userSorting'. Either include it or remove the dependency array.",["211"],"Array.prototype.find() expects a value to be returned at the end of arrow function.","expectedAtEnd","Assignments to the 'userName' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","ConditionalExpression","'useRef' is defined but never used.","'socketIOClient' is assigned a value but never used.","'chatRoomID' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"212","fix":"213"},{"desc":"214","fix":"215"},"Update the dependencies array to be: [checkedRoomInfo, setRoomName]",{"range":"216","text":"217"},"Update the dependencies array to be: [socket, userSorting]",{"range":"218","text":"219"},[636,638],"[checkedRoomInfo, setRoomName]",[936,944],"[socket, userSorting]"]