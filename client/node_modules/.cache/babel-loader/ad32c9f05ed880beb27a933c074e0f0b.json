{"ast":null,"code":"var _jsxFileName = \"/Users/jinkim/bye_blackhole/client/src/Chat/ChatLog.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport \"./styles/ChatLog.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChatLog = ({\n  userName,\n  socket\n}) => {\n  _s();\n\n  const [msgList, setMsgList] = useState([]);\n  useEffect(() => {\n    // messsgeItem : {msg: String, name: String, timeStamp: String}\n    socket.on(\"onReceive\", messageItem => {\n      userName = userName ? userName : sessionStorage.getItem(\"userName\");\n      if (userName === messageItem.userName) setMsgList(msgList => [...msgList, {\n        myMsg: messageItem.msg,\n        timeStamp: messageItem.timeStamp\n      }]);else setMsgList(msgList => [...msgList, messageItem]);\n      console.log(messageItem);\n      console.log(userName);\n    });\n    socket.on(\"onConnect\", systemMessage => {\n      setMsgList(msgList => [...msgList, {\n        sysMsg: systemMessage\n      }]);\n    });\n    socket.on(\"onDisconnect\", systemMessage => {\n      setMsgList(msgList => [...msgList, {\n        sysMsg: systemMessage\n      }]);\n    });\n    return () => {\n      socket.disconnect();\n    };\n  }, [socket]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: msgList.map((msg, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [msg.userName && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"msg-userName\",\n        children: msg.userName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 5\n      }, this), msg.msg && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"msgLeft\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"msg-msg\",\n          children: msg.msg\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"msg-timeStamp\",\n          children: [\"(\", msg.timeStamp, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 5\n      }, this), msg.myMsg && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"msgRight\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"msg-timeStamp\",\n          children: [\"(\", msg.timeStamp, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"msg-msg\",\n          children: msg.myMsg\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sysMsg\",\n        children: msg.sysMsg\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 4\n      }, this)]\n    }, idx, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 3\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 2\n  }, this);\n};\n\n_s(ChatLog, \"yptu8yjtsBqlAzZaE5mznXeW93w=\");\n\n_c = ChatLog;\nexport default ChatLog;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatLog\");","map":{"version":3,"sources":["/Users/jinkim/bye_blackhole/client/src/Chat/ChatLog.tsx"],"names":["React","useEffect","useState","ChatLog","userName","socket","msgList","setMsgList","on","messageItem","sessionStorage","getItem","myMsg","msg","timeStamp","console","log","systemMessage","sysMsg","disconnect","map","idx"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,sBAAP;;;AAGA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAA+B;AAAA;;AAC9C,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAQ,EAAR,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AAChB;AACAI,IAAAA,MAAM,CAACG,EAAP,CAAU,WAAV,EAAwBC,WAAD,IAAkE;AACxFL,MAAAA,QAAQ,GAAGA,QAAQ,GAAGA,QAAH,GAAcM,cAAc,CAACC,OAAf,CAAuB,UAAvB,CAAjC;AACA,UAAIP,QAAQ,KAAKK,WAAW,CAACL,QAA7B,EACCG,UAAU,CAAED,OAAD,IAAa,CAAC,GAAGA,OAAJ,EAAa;AAACM,QAAAA,KAAK,EAAEH,WAAW,CAACI,GAApB;AAAyBC,QAAAA,SAAS,EAAEL,WAAW,CAACK;AAAhD,OAAb,CAAd,CAAV,CADD,KAGCP,UAAU,CAAED,OAAD,IAAa,CAAC,GAAGA,OAAJ,EAAaG,WAAb,CAAd,CAAV;AACDM,MAAAA,OAAO,CAACC,GAAR,CAAYP,WAAZ;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAYZ,QAAZ;AACA,KARD;AASAC,IAAAA,MAAM,CAACG,EAAP,CAAU,WAAV,EAAwBS,aAAD,IAA2B;AACjDV,MAAAA,UAAU,CAAED,OAAD,IAAa,CAAC,GAAGA,OAAJ,EAAa;AAAEY,QAAAA,MAAM,EAAED;AAAV,OAAb,CAAd,CAAV;AACA,KAFD;AAGAZ,IAAAA,MAAM,CAACG,EAAP,CAAU,cAAV,EAA2BS,aAAD,IAAwB;AACjDV,MAAAA,UAAU,CAAED,OAAD,IAAa,CAAC,GAAGA,OAAJ,EAAa;AAAEY,QAAAA,MAAM,EAAED;AAAV,OAAb,CAAd,CAAV;AACA,KAFD;AAGA,WAAO,MAAM;AACZZ,MAAAA,MAAM,CAACc,UAAP;AACA,KAFD;AAGC,GApBQ,EAoBN,CAACd,MAAD,CApBM,CAAT;AAsBA,sBACA;AAAA,cACEC,OAAO,CAACc,GAAR,CAAY,CAACP,GAAD,EAAMQ,GAAN,kBACb;AAAA,iBACER,GAAG,CAACT,QAAJ,iBACA;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA,kBAA+BS,GAAG,CAACT;AAAnC;AAAA;AAAA;AAAA;AAAA,cAFF,EAIES,GAAG,CAACA,GAAJ,iBACA;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA,gCACC;AAAM,UAAA,SAAS,EAAC,SAAhB;AAAA,oBAA2BA,GAAG,CAACA;AAA/B;AAAA;AAAA;AAAA;AAAA,gBADD,eAEC;AAAM,UAAA,SAAS,EAAC,eAAhB;AAAA,0BAAkCA,GAAG,CAACC,SAAtC;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFD;AAAA;AAAA;AAAA;AAAA;AAAA,cALF,EAUED,GAAG,CAACD,KAAJ,iBACA;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA,gCACC;AAAM,UAAA,SAAS,EAAC,eAAhB;AAAA,0BAAkCC,GAAG,CAACC,SAAtC;AAAA;AAAA;AAAA;AAAA;AAAA,gBADD,eAEC;AAAM,UAAA,SAAS,EAAC,SAAhB;AAAA,oBAA2BD,GAAG,CAACD;AAA/B;AAAA;AAAA;AAAA;AAAA,gBAFD;AAAA;AAAA;AAAA;AAAA;AAAA,cAXF,eAgBC;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA,kBAA0BC,GAAG,CAACK;AAA9B;AAAA;AAAA;AAAA;AAAA,cAhBD;AAAA,OAAUG,GAAV;AAAA;AAAA;AAAA;AAAA,YADC;AADF;AAAA;AAAA;AAAA;AAAA,UADA;AAwBA,CAjDD;;GAAMlB,O;;KAAAA,O;AAmDN,eAAeA,OAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./styles/ChatLog.css\";\n\n\nconst ChatLog = ({ userName, socket }: any) => {\n\tconst [msgList, setMsgList] = useState<any[]>([]);\n\n\tuseEffect(() => {\n\t// messsgeItem : {msg: String, name: String, timeStamp: String}\n\tsocket.on(\"onReceive\", (messageItem: {userName:string, msg:string, timeStamp:string}) => {\n\t\tuserName = userName ? userName : sessionStorage.getItem(\"userName\")\n\t\tif (userName === messageItem.userName)\n\t\t\tsetMsgList((msgList) => [...msgList, {myMsg: messageItem.msg, timeStamp: messageItem.timeStamp} as never]);\n\t\telse\n\t\t\tsetMsgList((msgList) => [...msgList, messageItem]);\n\t\tconsole.log(messageItem);\n\t\tconsole.log(userName)\n\t});\n\tsocket.on(\"onConnect\", (systemMessage: string) => {\n\t\tsetMsgList((msgList) => [...msgList, { sysMsg: systemMessage } as never]);\n\t});\n\tsocket.on(\"onDisconnect\", (systemMessage: any) => {\n\t\tsetMsgList((msgList) => [...msgList, { sysMsg: systemMessage } as never]);\n\t});\n\treturn () => {\n\t\tsocket.disconnect();\n\t};\n\t}, [socket]);\n\n\treturn (\n\t<div>\n\t\t{msgList.map((msg, idx) => (\n\t\t<div key={idx}>\n\t\t\t{msg.userName &&\n\t\t\t\t<div className=\"msg-userName\">{msg.userName}</div>\n\t\t\t}\n\t\t\t{msg.msg &&\n\t\t\t\t<div className=\"msgLeft\">\n\t\t\t\t\t<span className=\"msg-msg\">{msg.msg}</span>\n\t\t\t\t\t<span className=\"msg-timeStamp\">({msg.timeStamp})</span>\n\t\t\t\t</div>\n\t\t\t}\n\t\t\t{msg.myMsg &&\n\t\t\t\t<div className=\"msgRight\">\n\t\t\t\t\t<span className=\"msg-timeStamp\">({msg.timeStamp})</span>\n\t\t\t\t\t<span className=\"msg-msg\">{msg.myMsg}</span>\n\t\t\t\t</div>\n\t\t\t}\n\t\t\t<div className=\"sysMsg\" >{msg.sysMsg}</div>\n\t\t</div>\n\t\t))}\n\t</div>\n\t);\n};\n\nexport default ChatLog;"]},"metadata":{},"sourceType":"module"}